AWSTemplateFormatVersion: '2010-09-09'
Description: Vpc with 2 public subnets and 2 private subnets in separate AZs
Metadata: {}
Parameters:
  VPCCIDR:
    Type: String
  PublicSubnet0CIDR:
    Type: String
  PublicSubnet1CIDR:
    Type: String
  PrivateSubnet0CIDR:
    Type: String
  PrivateSubnet1CIDR:
    Type: String
Mappings: {}
Conditions: {}
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PublicSubnet0CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet0
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet1
      VpcId: !Ref VPC
  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PrivateSubnet0CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet0
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet1
  PublicSubnetsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-RouteTable
  PublicSubnet0RouteTableAssociation:
    DependsOn:
    - PublicSubnetsRouteTable
    - PublicSubnet0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet0
  PublicSubnet1RouteTableAssociation:
    DependsOn:
    - PublicSubnetsRouteTable
    - PublicSubnet0
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet1
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-InternetGateway
  InternetVpcAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  PublicRoute:
    DependsOn:
    - PublicSubnetsRouteTable
    - IGW
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicSubnetsRouteTable
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicNACL
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet0"
      NetworkAclId: !Ref "PublicNetworkAcl"
  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      NetworkAclId: !Ref "PublicNetworkAcl"
  PrivateRouteTable0:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-route-table-0
  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-route-table-1
  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet0"
      RouteTableId: !Ref "PrivateRouteTable0"
  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet1"
      RouteTableId: !Ref "PrivateRouteTable1"
Outputs:
  PublicSubnet0ID:
    Description: ID of PublicSubnet0
    Value:
      Ref: PublicSubnet0
  PublicSubnet1ID:
    Description: ID of PublicSubnet1
    Value:
      Ref: PublicSubnet1
  PrivateSubnet0ID:
    Description: ID of PrivateSubnet0
    Value:
      Ref: PrivateSubnet0
  PrivateSubnet1ID:
    Description: ID of PrivateSubnet1
    Value:
      Ref: PrivateSubnet1
  VpcId:
    Description: ID of the VPC
    Value:
      Ref: VPC
  PrivateSubnet0AvailabilityZone:
    Description: AZ of Private Subnet 0
    Value:
      Fn::GetAtt:
        - PrivateSubnet0
        - AvailabilityZone
