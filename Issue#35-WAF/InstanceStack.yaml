AWSTemplateFormatVersion: '2010-09-09'
Description: Sets up a launch configuration and attaches to ASG
Metadata: {}
Parameters:
  AMIforWebServers:
    Type: String
  WebSecurityGroup:
    Type: String
  ALBSecurityGroup:
    Type: String
  SimpleAWSVPCID:
    Type: String
  FirstSubnetID:
    Type: String
  SecondSubnetID:
    Type: String
  OpenWebPort:
    Type: Number
Mappings: {}
Conditions: {}
Resources:
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
      - Key: Name
        Value: SimpleAWS CloudFront Distribution
      DistributionConfig:
        Comment: SimpleAWS CloudFront Distribution
        DefaultCacheBehavior:
          TargetOriginId: !Ref SimpleAWSLoadBalancer
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
        Enabled: true
        Origins:
        - DomainName:
            Fn::GetAtt:
            - SimpleAWSLoadBalancer
            - DNSName
          Id: !Ref SimpleAWSLoadBalancer
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
  SimpleAWSRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SimpleAWSSystemManagerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          - ssm:UpdateInstanceInformation
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:GetEncryptionConfiguration
          Resource: '*'
      Roles:
      - Ref: SimpleAWSRole
  SimpleAWSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  SimpleAWSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: SimpleAWSRole
  SimpleAWSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - Ref: FirstSubnetID
      - Ref: SecondSubnetID
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-ALB
      Type: application
  SimpleAWSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: SimpleAWSTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: SimpleAWSLoadBalancer
      Port:
        Ref: OpenWebPort
      Protocol: HTTP
  SimpleAWSRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn:
          Ref: SimpleAWSTargetGroup
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /
      ListenerArn:
        Ref: SimpleAWSListener
      Priority: 1
  SimpleAWSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AWSSimpleAWS
      Port:
        Ref: OpenWebPort
      Protocol: HTTP
      VpcId:
        Ref: SimpleAWSVPCID
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-TargetGroup
      HealthCheckEnabled: true
      HealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      HealthCheckPort:
        Ref: OpenWebPort
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: 200-299
      TargetType: instance
      Targets: []
  SimpleAWSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: '1'
    Properties:
      TargetGroupARNs:
      - Ref: SimpleAWSTargetGroup
      VPCZoneIdentifier:
      - Ref: FirstSubnetID
      - Ref: SecondSubnetID
      AvailabilityZones:
      - Fn::Select:
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      - Fn::Select:
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      LaunchConfigurationName:
        Ref: SimpleAWSLaunchConfig
      DesiredCapacity: '2'
      MinSize: '1'
      MaxSize: '3'
  SimpleAWSLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages: {}
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - '

                  '
                - - '[main]'
                  - Fn::Sub: stack=${AWS::StackId}
                  - Fn::Sub: region=${AWS::Region}
                  - interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - '

                  '
                - - '[cfn-auto-reloader-hook]'
                  - triggers=post.update
                  - path=Resources.SimpleAWSLaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - Fn::Sub: '         --stack ${AWS::StackName}'
                  - '         --resource SimpleAWSLaunchConfig '
                  - Fn::Sub: '         --region  ${AWS::Region}'
                  - runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              docker:
                enabled: true
                ensureRunning: true
    Properties:
      IamInstanceProfile:
        Ref: SimpleAWSInstanceProfile
      ImageId:
        Ref: AMIforWebServers
      InstanceType: t3.micro
      AssociatePublicIpAddress: true
      SecurityGroups:
      - Ref: WebSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - '

            '
          - - '#!/bin/bash -xe'
            - yum update -y
            - yum install -y docker
            - service docker start
            - '# Update aws-cfn-bootstrap to the latest'
            - yum install -y aws-cfn-bootstrap
            - docker pull bkimminich/juice-shop
            - Fn::Sub: docker run -d -p ${OpenWebPort}:3000 bkimminich/juice-shop
            - '# Call cfn-init script to install files and packages'
            - Fn::Sub: /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource
                SimpleAWSLaunchConfig --region ${AWS::Region}
            - '# Call cfn-signal script to send a signal with exit code'
            - Fn::Sub: /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName}
                --resource SimpleAWSAutoScalingGroup --region ${AWS::Region}
Outputs:
  SiteURL:
    Description: Public URL of the application
    Value:
      Fn::GetAtt:
      - CloudfrontDistribution
      - DomainName
  SimpleAWSLoadBalancer:
    Description: Public URL of the Load Balancer
    Value:
      Fn::GetAtt:
      - SimpleAWSLoadBalancer
      - DNSName
